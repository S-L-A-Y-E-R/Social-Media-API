datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

model User {
    id                       Int       @id @default(autoincrement())
    username                 String    @unique
    email                    String    @unique
    password                 String
    birthDate                DateTime
    joinDate                 DateTime  @default(now())
    lastLogin                DateTime  @default(now())
    passwordResetToken       String?   @unique
    passwordResetTokenExpiry DateTime?
    active                   Boolean   @default(true)
    profile                  Profile?

    @@index([username, email])
}

model Profile {
    id             Int            @id @default(autoincrement())
    fullName       String
    Bio            String?
    profilePicture Image?
    followers      Profile[]      @relation("FollowRelation")
    following      Profile[]      @relation("FollowRelation")
    followersCount Int            @default(0)
    followingCount Int            @default(0)
    postsCount     Int            @default(0)
    privacy        Privacy        @default(PUBLIC)
    updatedAt      DateTime       @updatedAt
    userId         Int            @unique
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    subscriptions  Subscription[]

    @@index([fullName])
}

model Image {
    id        Int     @id @default(autoincrement())
    url       String
    profileId Int     @unique
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Subscription {
    id        Int              @id @default(autoincrement())
    endpoint  String
    auth      String
    p256dh    String
    type      SubscriptionType
    profileId Int              @unique
    profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Privacy {
    PUBLIC
    PRIVATE
    FRIENDS
}

enum SubscriptionType {
    NEW_FOLLOWER
    MESSAGE
}
