datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

model User {
    id                       Int       @id @default(autoincrement())
    username                 String    @unique
    email                    String    @unique
    password                 String
    birthDate                DateTime
    joinDate                 DateTime  @default(now())
    lastLogin                DateTime  @default(now())
    passwordResetToken       String?   @unique
    passwordResetTokenExpiry DateTime?
    active                   Boolean   @default(true)
    profile                  Profile?

    @@index([username])
    @@index([email])
}

model Profile {
    id             Int            @id @default(autoincrement())
    fullName       String
    Bio            String?
    profilePicture Image?
    followers      Profile[]      @relation("FollowRelation")
    following      Profile[]      @relation("FollowRelation")
    followersCount Int            @default(0)
    followingCount Int            @default(0)
    postsCount     Int            @default(0)
    privacy        Privacy        @default(PUBLIC)
    updatedAt      DateTime       @updatedAt
    userId         Int            @unique
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    blockList      Profile[]      @relation("BlockRelation")
    blockedBy      Profile[]      @relation("BlockRelation")
    sharedPosts    PostProfile[]
    posts          Post[]
    subscriptions  Subscription[]
    comments       Comment[]
    likes          Like[]

    @@index([fullName])
}

model Post {
    id                 Int           @id @default(autoincrement())
    content            String
    isEdited           Boolean       @default(false)
    privacy            Privacy       @default(FRIENDS)
    views              Int           @default(0)
    shares             Int           @default(0)
    likesCount         Int           @default(0)
    commentsCount      Int           @default(0)
    commentsEnabled    Boolean       @default(true)
    sharesEnabled      Boolean       @default(true)
    profilesSharedWith PostProfile[]
    tags               String[]
    images             Image[]
    videos             Video[]
    likes              Like[]
    comments           Comment[]
    authorId           Int
    author             Profile       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    publishedAt        DateTime      @default(now())
    updatedAt          DateTime      @updatedAt

    @@index([content])
    @@index([privacy])
    @@index([authorId])
}

model PostProfile {
    postId    Int
    post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    profileId Int
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([postId, profileId])
    @@index([postId])
    @@index([profileId])
}

model Comment {
    id            Int       @id @default(autoincrement())
    content       String
    isEdited      Boolean   @default(false)
    repliesCount  Int       @default(0)
    likesCount    Int       @default(0)
    replies       Comment[] @relation("ParentComment")
    parentComment Comment?  @relation("ParentComment", fields: [parentId], references: [id])
    parentId      Int?
    authorId      Int
    author        Profile   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    likes         Like[]
    video         Video?
    image         Image?
    postId        Int
    post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    publishedAt   DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@index([content])
    @@index([authorId])
    @@index([postId])
}

model Like {
    id        Int      @id @default(autoincrement())
    authorId  Int      @unique
    author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    postId    Int?     @unique
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    commentId Int?     @unique
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([authorId])
    @@index([postId])
    @@index([commentId])
}

model Image {
    id        Int      @id @default(autoincrement())
    url       String
    profileId Int?     @unique
    profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    posttId   Int?
    post      Post?    @relation(fields: [posttId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    commentId Int?     @unique
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([url])
    @@index([profileId])
    @@index([posttId])
}

model Video {
    id        Int      @id @default(autoincrement())
    url       String
    posttId   Int?
    post      Post?    @relation(fields: [posttId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    commentId Int?     @unique
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([url])
    @@index([posttId])
    @@index([commentId])
}

model Subscription {
    id        Int              @id @default(autoincrement())
    endpoint  String
    auth      String
    p256dh    String
    type      SubscriptionType
    profileId Int              @unique
    profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([endpoint])
    @@index([profileId])
}

enum Privacy {
    PUBLIC
    PRIVATE
    FRIENDS
}

enum SubscriptionType {
    NEW_FOLLOWER
    NEW_COMMENT
    NEW_LIKE
    MESSAGE
    MENTION
}
